#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

FUSE_BIN_DIR=${OPENSHIFT_FUSE_DIR}/container/bin
FUSE_PID_FILE=${OPENSHIFT_FUSE_DIR}/container/instances/instance.properties
FUSE_PASSWD_FILE=${OPENSHIFT_FUSE_DIR}/container/etc/passwd
FUSE_USRPROPS_FILE=${OPENSHIFT_FUSE_DIR}/container/etc/users.properties
FUSE_SYSPROPS_FILE=${OPENSHIFT_FUSE_DIR}/container/etc/system.properties
FUSE_BRANDING_FILE=${OPENSHIFT_FUSE_DIR}/container/etc/branding.properties

function wait_for_start() {
  for i in {1..20};
     do
       if [ ! -f $FUSE_PID_FILE ]; then
         sleep 1
       else
         break
       fi
     done
   if [ -f $FUSE_PID_FILE ]; then
      for j in {1..20};
         do
           PID=`cat $FUSE_PID_FILE | grep "item.0.pid" | awk -F "=" '{print $2}'`
           if [ "$PID" = "" ]; then
             sleep 1
           else
            break
           fi
     done
     if ps -p $PID > /dev/null; then
       if [ "$1" == "wait-for-fabric" ] ; then
         retries=300
         fabric_loaded=0
         while [ $retries -gt 1 ]; do
            result=`curl -s http://admin:${OPENSHIFT_FUSE_PASSWORD}@$OPENSHIFT_FUSE_IP:8080/jolokia/read/io.fabric8:type=Fabric/CurrentContainerName || :`
            ( echo $result | grep '"status":200' > /dev/null ) && fabric_loaded=1 && break
            let retries=$retries-1
            sleep 1
         done         
         if [ $fabric_loaded -eq 1 ]; then
           client_result ""
         else
           client_error "Command Failed: Could not reach ${OPENSHIFT_APP_NAME} console."
           exit 1
         fi
       else
         client_result ""
       fi
     else
       client_error "Command Failed: ${OPENSHIFT_APP_NAME} ($PID) is not running"
       exit 1
     fi
   else
    client_error "Command Failed: Could not find instance.properties"
    exit 1
   fi
}

function replace_property_value {
  sed "s/$1.*=.*/$1 = $2/g" $3 > $3.tmp
  rm $3
  mv $3.tmp $3
}

function sed_replace {
  sed "$1" $2 > $2.tmp
  rm $2
  mv $2.tmp $2
}

function containsElement () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

case "$1" in
  -v|--version)
    version="$2"
esac
echo "$version" > "$OPENSHIFT_FUSE_DIR/env/OPENSHIFT_FUSE_VERSION"

#Extract the distro
cd $OPENSHIFT_FUSE_DIR

mkdir $OPENSHIFT_FUSE_DIR/container
cd $OPENSHIFT_FUSE_DIR/usr
nonshared=("bin" "etc" "data" "deploy" "fabric" "instances" "lib" "quickstarts")
for i in *; do
  if containsElement $i ${nonshared[@]}; then
    cp -r $OPENSHIFT_FUSE_DIR/usr/$i $OPENSHIFT_FUSE_DIR/container/$i
  else
    ln -s $OPENSHIFT_FUSE_DIR/usr/$i $OPENSHIFT_FUSE_DIR/container/$i
  fi
done

# Make sure the scripts are executable
chmod a+x $OPENSHIFT_FUSE_DIR/container/bin/*

# Copy the version specific files into container directory
cd $OPENSHIFT_FUSE_DIR/versions/$version
files=$(find . -name \*)
for i in $files ; do
  if [ -d $i ]; then
    continue
  fi
  if [[ $i == *.erb ]]; then
    erb $i > $OPENSHIFT_FUSE_DIR/container/${i%.*}
  else
    cp $i $OPENSHIFT_FUSE_DIR/container/$i || :
  fi
done

# Remove Unsupported Profiles
cd $OPENSHIFT_FUSE_DIR/container/fabric/import/fabric/configs/versions/1.0/profiles
rm -rf controller-jon-server controller-rhq-agent controller-tomcat controller-wildfly openshift-jbossews.1 openshift-jbossews.2 docker
rm -rf gateway-haproxy gateway-http gateway-mq
rm -rf hadoop-base hadoop-datanode hadoop-namenode
# rm -rf insight insight-camel insight-core insight-hdfs insight-jetty insight-kibana
rm -rf jboss-brms-controller-tomcat jboss-brms-controller-wildfly jboss-brms-feature-workbench jboss-brms-feature-workbench.openshift
# rm -rf mq-replicated
rm -rf openshift-aerogear-pushserver
rm -rf jboss-jbossews-hawtio

cd $OPENSHIFT_FUSE_DIR

# Remove some default service configs since we don't need to boot up in full ESB mode.
rm container/etc/org.apache.aries.transaction.cfg 2> /dev/null || :
rm container/etc/org.apache.servicemix.jbi.cfg 2> /dev/null || :
rm container/etc/org.apache.servicemix.nmr.cfg 2> /dev/null || :
rm container/etc/org.fusesource.mq.fabric.server-default.cfg 2> /dev/null || :
rm container/etc/activemq.xml 2> /dev/null || :

# Append shutdown configuration
echo "" >> container/etc/config.properties
echo "karaf.shutdown.host=${OPENSHIFT_FUSE_IP}" >> container/etc/config.properties
echo "karaf.shutdown.port=${OPENSHIFT_FUSE_SHUTDOWN_PORT}" >> container/etc/config.properties
# Limit the maximum number of created threads
echo "felix.threading.timeout=0" >> container/etc/config.properties

echo "karaf.log.dir=${OPENSHIFT_FUSE_LOG_DIR}" >> container/etc/system.properties

# reduce transient bundles loaded on start before fabric is created
cat container/etc/org.apache.karaf.features.cfg | sed 's/featuresBoot.*/featuresBoot=jasypt-encryption,config,management,fabric/' > container/etc/org.apache.karaf.features.cfg.mod || :
cp container/etc/org.apache.karaf.features.cfg.mod container/etc/org.apache.karaf.features.cfg || :
rm container/etc/org.apache.karaf.features.cfg.mod || :

# Retrieve password
if [ ! -z "${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD:-}" ]; then
    OPENSHIFT_FUSE_PASSWORD="${OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD}"
elif [ -z "${OPENSHIFT_FUSE_PASSWORD:-}" ]; then
  if [ ! -z "${OPENSHIFT_AMQ_PASSWORD:-}" ]; then
      OPENSHIFT_FUSE_PASSWORD="${OPENSHIFT_AMQ_PASSWORD}"
  fi
fi
if [ ! -z "${OPENSHIFT_FUSE_PASSWORD:-}" ]; then
    if [ ${#OPENSHIFT_FUSE_PASSWORD} -gt 5 ]; then
      client_result "Using provided password from cartridge"
      export OPENSHIFT_FUSE_PASSWORD
      set_env_var OPENSHIFT_FUSE_PASSWORD "${OPENSHIFT_FUSE_PASSWORD}" env
    else
      client_error "Command Failed: provided password must be at least 6 characters"
      exit 1
    fi
elif [ ! -z "${OPENSHIFT_FUSE_DOMAIN_PASSWORD:-}" ]; then
    client_result "Using provided password from domain"
    export OPENSHIFT_FUSE_PASSWORD=${OPENSHIFT_FUSE_DOMAIN_PASSWORD}
    set_env_var OPENSHIFT_FUSE_PASSWORD "${OPENSHIFT_FUSE_PASSWORD}" env
else
    # generate password and setup env vars
    client_result "Generating password"
    export OPENSHIFT_FUSE_PASSWORD=$(generate_password)
    set_env_var OPENSHIFT_FUSE_PASSWORD "${OPENSHIFT_FUSE_PASSWORD}" env
fi

# Store password
echo "admin=${OPENSHIFT_FUSE_PASSWORD},admin" > $FUSE_USRPROPS_FILE
echo "${OPENSHIFT_FUSE_PASSWORD}" > $FUSE_PASSWD_FILE
echo "zookeeper.password=${OPENSHIFT_FUSE_PASSWORD}" >> $FUSE_SYSPROPS_FILE


# Trust even self signed certs since OS gives us a self signed cert.
echo "javax.net.ssl.trustAll=true" >> $FUSE_SYSPROPS_FILE
# Enable the openshift port mapper
echo "org.fusesource.common.util.PublicPortMapper=openshift" >> $FUSE_SYSPROPS_FILE

FUSE_CERT=""

# Configure to join an existing fabric
join=false
if [ ! -z "${OPENSHIFT_FUSE_ZOOKEEPER_URL:-}" ]; then
    client_result "Using provided url from cartridge"
    echo "zookeeper.url=$OPENSHIFT_FUSE_ZOOKEEPER_URL" >> $FUSE_SYSPROPS_FILE

    # are we the first gear created against an external fuse zk server.
    if [ -z "${OPENSHIFT_FUSE_DOMAIN_DNS:-}" ]; then 
      OPENSHIFT_FUSE_DOMAIN_DNS=${OPENSHIFT_FUSE_EXTERNAL_DNS}
      OPENSHIFT_FUSE_DOMAIN_SSH_PORT=${OPENSHIFT_FUSE_EXTERNAL_SSH_PORT}
      OPENSHIFT_FUSE_DOMAIN_HTTP_PORT=${OPENSHIFT_FUSE_EXTERNAL_HTTP_PORT}
      if [ -z "${OPENSHIFT_FUSE_DOMAIN_HTTP_PORT:-}" ]; then
        OPENSHIFT_FUSE_DOMAIN_HTTP_PORT=8181
      fi
      add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_DNS=${OPENSHIFT_FUSE_DOMAIN_DNS}"
      add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_SSH_PORT=${OPENSHIFT_FUSE_DOMAIN_SSH_PORT}"
      add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_HTTP_PORT=${OPENSHIFT_FUSE_DOMAIN_HTTP_PORT}"
      add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_ZOOKEEPER_URL=${OPENSHIFT_FUSE_ZOOKEEPER_URL}"
      add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_PASSWORD=${OPENSHIFT_FUSE_PASSWORD}"    
    fi 
    join=true
elif  [ ! -z "${OPENSHIFT_FUSE_DOMAIN_ZOOKEEPER_URL:-}" ]; then
    client_result "Using provided url from domain"
    export OPENSHIFT_FUSE_ZOOKEEPER_URL=${OPENSHIFT_FUSE_DOMAIN_ZOOKEEPER_URL}
    set_env_var OPENSHIFT_FUSE_ZOOKEEPER_URL "${OPENSHIFT_FUSE_ZOOKEEPER_URL}" env
    join=true
else
    # Additional system properties
    client_result "Configuring zookeeper server"
    export OPENSHIFT_FUSE_ZOOKEEPER_URL=${OPENSHIFT_GEAR_DNS}:${OPENSHIFT_FUSE_ZOOKEEPER_PROXY_PORT}
    set_env_var OPENSHIFT_FUSE_ZOOKEEPER_URL "${OPENSHIFT_FUSE_ZOOKEEPER_URL}" env
    replace_property_value ensemble.auto.start true $FUSE_SYSPROPS_FILE
    echo "zookeeper.server.port=${OPENSHIFT_FUSE_ZOOKEEPER_PORT}" >> $FUSE_SYSPROPS_FILE
    echo "zookeeper.server.connection.port=${OPENSHIFT_FUSE_ZOOKEEPER_PROXY_PORT}" >> $FUSE_SYSPROPS_FILE
    
    # Lets create a self signed cert for SSL
    FUSE_KEYSTORE_FILE="$OPENSHIFT_FUSE_DIR/container/fabric/import/fabric/configs/versions/1.0/profiles/default/keystore.jks"
    FUSE_CERT_FILE="$OPENSHIFT_FUSE_DIR/container/fabric/import/fabric/configs/versions/1.0/profiles/default/keystore.cert"
    keytool -genkey -storetype JKS -storepass "${OPENSHIFT_FUSE_PASSWORD}" -keystore "${FUSE_KEYSTORE_FILE}" -keypass "${OPENSHIFT_FUSE_PASSWORD}" -alias "${OPENSHIFT_GEAR_DNS}" -keyalg RSA -keysize 4096 -dname "cn=*-${OPENSHIFT_NAMESPACE}.${OPENSHIFT_CLOUD_DOMAIN}" -validity 3650
    keytool -exportcert -keystore "${FUSE_KEYSTORE_FILE}" -alias ${OPENSHIFT_GEAR_DNS} -storepass "${OPENSHIFT_FUSE_PASSWORD}" --rfc > "${FUSE_CERT_FILE}"
    FUSE_CERT=`cat "${FUSE_CERT_FILE}"`
    
    # We need to create a broker profile that match the what mq-create would generate:
    mkdir -p "$OPENSHIFT_FUSE_DIR/container/fabric/import/fabric/configs/versions/1.0/profiles/mq/broker/default.${OPENSHIFT_APP_NAME}.profile"
    cat > "$OPENSHIFT_FUSE_DIR/container/fabric/import/fabric/configs/versions/1.0/profiles/mq/broker/default.${OPENSHIFT_APP_NAME}.profile/io.fabric8.agent.properties" <<EOF
#Profile:mq-broker-default.${OPENSHIFT_APP_NAME}
attribute.parents = mq-base
EOF
    cat > "$OPENSHIFT_FUSE_DIR/container/fabric/import/fabric/configs/versions/1.0/profiles/mq/broker/default.${OPENSHIFT_APP_NAME}.profile/org.fusesource.mq.fabric.server-bar.properties" <<EOF
standby.pool = default
connectors = openwire
broker-name = ${OPENSHIFT_APP_NAME}
keystore.url = profile:keystore.jks
data = \${karaf.base}/data/${OPENSHIFT_APP_NAME}
config = profile:broker.xml
group = default
kind = MasterSlave
EOF

    OPENSHIFT_FUSE_DOMAIN_DNS=${OPENSHIFT_GEAR_DNS}
    OPENSHIFT_FUSE_DOMAIN_SSH_PORT=${OPENSHIFT_FUSE_SSH_PROXY_PORT}
    OPENSHIFT_FUSE_DOMAIN_HTTP_PORT=80
    add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_DNS=${OPENSHIFT_FUSE_DOMAIN_DNS}"
    add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_SSH_PORT=${OPENSHIFT_FUSE_DOMAIN_SSH_PORT}"
    add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_HTTP_PORT=${OPENSHIFT_FUSE_DOMAIN_HTTP_PORT}"
    add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_ZOOKEEPER_URL=${OPENSHIFT_FUSE_ZOOKEEPER_URL}"
    add_domain_env_var "OPENSHIFT_FUSE_DOMAIN_PASSWORD=${OPENSHIFT_FUSE_PASSWORD}"    
fi

if  [ ! -z "${OPENSHIFT_FUSE_CREATED_FROM_FABRIC:-}" ]; then
    client_result "App creation initiated from fabric so will join fabric automatically"
    join=false
fi

OPENSHIFT_FUSE_CONSOLE_URL="https://${OPENSHIFT_FUSE_DOMAIN_DNS}"
if [ -f ${FUSE_BRANDING_FILE} ]; then
  OPENSHIFT_FUSE_DISTRO_VERSION=`ls -1 $OPENSHIFT_FUSE_DIR/container/system/org/jboss/amq/mq-fabric | tail -n 1`
  cat ${FUSE_BRANDING_FILE} | sed -e "s=OPENSHIFT_FUSE_CONSOLE_URL=$OPENSHIFT_FUSE_CONSOLE_URL=g" | sed "s/OPENSHIFT_FUSE_DISTRO_VERSION/$OPENSHIFT_FUSE_DISTRO_VERSION/" > ${FUSE_BRANDING_FILE}.mod
  cp ${FUSE_BRANDING_FILE}.mod ${FUSE_BRANDING_FILE}
  rm ${FUSE_BRANDING_FILE}.mod
fi

client_result ""
client_result "Application ${OPENSHIFT_APP_NAME} created successfully.  Please make note of these credentials:"
client_result ""
client_result "   Console URL:        ${OPENSHIFT_FUSE_CONSOLE_URL}"
client_result "   Console User:       admin"
client_result "   Console Password:   ${OPENSHIFT_FUSE_PASSWORD}"
client_result "   Zookeeper URL:      ${OPENSHIFT_FUSE_ZOOKEEPER_URL}"
client_result "   Zookeeper Password: ${OPENSHIFT_FUSE_PASSWORD}"
if [ ! -z "${FUSE_CERT_FILE:-}" ]; then
  client_result "   SSL Certificate URL: ${OPENSHIFT_FUSE_CONSOLE_URL}/hawtio/index.html#/wiki/branch/1.0/view/fabric/profiles/default.profile/keystore.cert"
fi

if ! $join; then
client_result ""
client_result "   The management console will be available shortly at: ${OPENSHIFT_FUSE_CONSOLE_URL}"
client_result ""
fi

cart_props "username=admin"
cart_props "password=${OPENSHIFT_FUSE_PASSWORD}"

touch ${OPENSHIFT_FUSE_DIR}/upgrade_after_install

${FUSE_BIN_DIR}/start
if $join; then
    wait_for_start
    retries=40
    while [ $retries -gt 1 ]; do
      if ${FUSE_BIN_DIR}/client -r 5 -d 5 -h ${OPENSHIFT_FUSE_IP} -a ${OPENSHIFT_FUSE_SSH_PORT} -u admin -p ${OPENSHIFT_FUSE_PASSWORD} "wait-for-service io.fabric8.boot.commands.service.JoinAvailable"; then
        break;
      fi
      let retries=$retries-1
      sleep 5
    done
    ${FUSE_BIN_DIR}/client -h ${OPENSHIFT_FUSE_IP} -a ${OPENSHIFT_FUSE_SSH_PORT} -u admin -p ${OPENSHIFT_FUSE_PASSWORD} "fabric:join -f -b ${OPENSHIFT_FUSE_IP} --zookeeper-password ${OPENSHIFT_FUSE_PASSWORD} ${OPENSHIFT_FUSE_ZOOKEEPER_URL}"

    # Create a broker profile on using the ZK server since it should be up and running.
    ${FUSE_BIN_DIR}/client -r 10 -d 10 -h ${OPENSHIFT_FUSE_DOMAIN_DNS} -a ${OPENSHIFT_FUSE_DOMAIN_SSH_PORT} -u admin -p ${OPENSHIFT_FUSE_PASSWORD} "fabric:mq-create -D bind.address=${OPENSHIFT_FUSE_IP} ${OPENSHIFT_APP_NAME}"    
    ${FUSE_BIN_DIR}/client -r 10 -d 10 -h ${OPENSHIFT_FUSE_DOMAIN_DNS} -a ${OPENSHIFT_FUSE_DOMAIN_SSH_PORT} -u admin -p ${OPENSHIFT_FUSE_PASSWORD} "fabric:container-add-profile ${OPENSHIFT_APP_NAME} mq-broker-default.${OPENSHIFT_APP_NAME}"

    client_result ""
    client_result "WARNING: Creating fabric containers directly from"
    client_result "         openshift is supported in a limited way"
    client_result "         as such containers can not be fully managed"
    client_result "         by fabric."
else
    wait_for_start 'wait-for-fabric'
fi
